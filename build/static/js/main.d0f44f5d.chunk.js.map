{"version":3,"sources":["logo.svg","lib/utils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getColors","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","fetch","then","r","json","abrupt","sent","stop","apply","this","arguments","App","state","colors","selected","defaultColor","changeColor","e","preventDefault","stopPropagation","_this$state","_this","setState","length","_this$state2","react_default","createElement","onClick","className","style","backgroundColor","src","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oMCE3BC,eAAS,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,IAAA,OAAAH,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACVC,MAAM,gBAChBC,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SAFQ,cAAAN,EAAAO,OAAA,SAAAP,EAAAQ,MAAA,wBAAAR,EAAAS,SAAAX,MAAH,yBAAAN,EAAAkB,MAAAC,KAAAC,YAAA,ICmDPC,6MA7CbC,MAAQ,CACNC,OAAQ,KACRC,SAAU,KAGZC,aAAe,YAOfC,YAAc,SAACC,GACbA,EAAEC,iBACFD,EAAEE,kBAFiB,IAAAC,EAGUC,EAAKT,MAA1BE,EAHWM,EAGXN,SAAUD,EAHCO,EAGDP,OAIlB,OAHAQ,EAAKC,SAAS,CACZR,SAAWA,EAAW,GAAMD,EAAOU,OAAS,EAAIT,EAAS,KAEpD,oNAXczB,WAAfwB,SACNJ,KAAKa,SAAS,CAAET,8IAcT,IAAAW,EAEsBf,KAAKG,MAA1BC,EAFDW,EAECX,OAAQC,EAFTU,EAESV,SAEhB,OACEW,EAAA/B,EAAAgC,cAAA,OAAKC,QAASlB,KAAKO,YAAaY,UAAU,MAAMC,MAAO,CAACC,gBAAiBjB,GAAUA,EAAOC,IAAaL,KAAKM,eAE1GU,EAAA/B,EAAAgC,cAAA,OAAKK,IAAI,cAETN,EAAA/B,EAAAgC,cAAA,OAAKE,UAAU,QACbH,EAAA/B,EAAAgC,cAAA,mCACAD,EAAA/B,EAAAgC,cAAA,oBACUD,EAAA/B,EAAAgC,cAAA,WACRD,EAAA/B,EAAAgC,cAAA,KAAGM,KAAK,mCAAR,sCAtCMC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAA/B,EAAAgC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC","file":"static/js/main.d0f44f5d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\n\nexport const getColors = async () => {\n  return await fetch('/colors.json')\n    .then(r => r.json())\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { getColors } from './lib/utils'\n\nclass App extends Component {\n\n  state = {\n    colors: null,\n    selected: 0\n  }\n\n  defaultColor = '#000000';\n\n  async componentDidMount(){\n    const colors = await getColors();\n    this.setState({ colors })\n  }\n\n  changeColor = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const { selected, colors } = this.state;\n    this.setState({\n      selected: (selected + 1) >= colors.length ? 0 : selected+1\n    })\n    return false;\n\n  }\n\n  render() {\n\n    const { colors, selected } = this.state;\n\n    return (\n      <div onClick={this.changeColor} className=\"App\" style={{backgroundColor: colors && colors[selected] || this.defaultColor }}>\n\n        <img src=\"/logo.png\" />\n\n        <div className=\"copy\">\n          <p>Site Underconstruction</p>\n          <p>\n            Contact:<br />\n            <a href=\"mailto:grafismasakini@gmail.com\">grafismasakini@gmail.com</a>\n          </p>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}